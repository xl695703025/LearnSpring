<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
		<property name="url"
			value="jdbc:mysql://127.0.0.1/smbms?characterEncoding=utf-8&amp;useSSL=false"></property>
		<property name="username" value="root"></property>
		<property name="password" value="970713"></property>
	</bean>
	<!-- 配置sqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 引用数据源组件 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- 引用Mybatis配置文件中的配置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>

		<!-- 使用MapperScannerConfiger注入映射器后，不再需要配置 -->
		<!-- 配置SQL映射文件信息 -->
		<!-- <property name="mapperLocations"> <list> <value>classpath:com/yuxia/mapper/*.xml</value> 
			</list> </property> -->
	</bean>

	<!-- 配置SqlSessionTemplate -->
	<!-- 由于继承了SqlSessionDaoSupport，就不用配置sqlSessionTemplate了 -->
	<!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"> 
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg> 
		</bean> -->
	<!-- 配置DAO组件并注入SqlSessionTemplate实例 -->
	<!-- <bean id="userMapper" class="com.yuxia.mapper.UserMapperImpl"> <property 
		name="sqlSession" ref="sqlSessionTemplate"></property> </bean> -->
		
	<!-- 配置DAO，使用MapperScannerConfiger将可以简化配置 -->
	<!-- <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
		<property name="mapperInterface" value="com.yuxia.mapper.UserMapper"></property> 
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property> 
		</bean> -->

	<!-- 用注解后不再需要配置 -->
	<!-- <bean id="userService" class="com.yuxia.service.UserServiceImpl"> 
		mapper会由MapperScannerConfigurer自动生成 
		<property name="userMapper" ref="userMapper"></property> </bean> -->
	<!-- 配置注解定义的业务Bean -->
	<context:component-scan base-package="com.yuxia.service" />

	<!-- MapperScannerConfiger简化DAO配置 -->
	<!-- 会自动动态的注册为MapperFactoryBean，即可批量映射器类 -->
	<!-- 自动注入 sqlSessionFactory -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定扫描的基准包 -->
		<property name="basePackage" value="com.yuxia.mapper"></property>
		<!-- 如果环境中出于不同的目的配置了多个SqlSessionFactory实例，自动装配将无法进行 需要显示的指定所依赖的SqlSessionFactory实例，注意属性是sqlSessionFactoryBeanName -->
		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" 
			/> -->
		<!-- 默认就是sqlSessionFactory，在 19行对其进行了配置 -->
	</bean>


	<!-- 定义事务管理器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 指定事务管理器，并且配置属性 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 定义切入点 -->
	<aop:config>
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.yuxia.service.*.*(..))"/>
	</aop:config>

</beans>